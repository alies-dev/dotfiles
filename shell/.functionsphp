# Example switch-php 8.5
# Example switch-php 8.4
# Example switch-php 8.3
# Example switch-php 8.2
# Example switch-php 8.1
function switch-php {
  new_version=$1

  # Verify if the argument is correctly provided
  if [[ -z "${new_version}" ]]; then
      echo "You must specify a PHP version to switch to. Example: 'switch-php 8.4'" >&2
      return 1
  fi

  # Get current PHP version first
  current_version=$(php -r 'echo PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION;')

  # If we're already on the requested version, no need to switch
  if [[ "$current_version" == "$new_version" ]]; then
      echo "PHP $new_version is already active"
      return 0
  fi

  # First check if the version exists either as php@version or default php
  php_package="php@$new_version"
  
  # Check if version is available in brew
  if ! brew search "$php_package" 2>/dev/null | grep -q "^$php_package$"; then
      if ! brew info php | grep -q "PHP $new_version"; then
          echo "PHP $new_version is not available in Homebrew."
          echo "Available PHP versions:"
          brew list | grep php
          return 1
      fi
  fi

  # Check if version is installed
  if brew list php 2>/dev/null | grep -q "^php$" && brew info php | grep -q "PHP $new_version"; then
      php_package="php"
  elif ! brew list "$php_package" 2>/dev/null; then
      echo "PHP version $new_version is not installed using brew."
      if brew search "$php_package" 2>/dev/null | grep -q "^$php_package$"; then
          echo "You can install it with 'brew install $php_package'"
      else
          echo "This version is not yet available in Homebrew"
      fi
      echo "Available PHP versions:"
      brew list | grep php
      return 1
  fi

  current_package="php@$current_version"
  
  # If current version is the default php package, use that
  if [[ -L "/opt/homebrew/opt/php" && "$(readlink /opt/homebrew/opt/php)" == *"/php-"* ]]; then
      current_package="php"
  fi

  echo "Switching from PHP $current_version to PHP $new_version..."

  # Unlink current version
  brew unlink "$current_package" 2>/dev/null || true

  # Link new version
  if ! brew link --overwrite --force "$php_package"; then
      echo "Failed to switch PHP versions. Try running: brew link --overwrite --force $php_package" >&2
      return 1
  fi

  # Verify the switch
  new_current_version=$(php -r 'echo PHP_MAJOR_VERSION . "." . PHP_MINOR_VERSION;')
  if [[ "$new_current_version" == "$new_version" ]]; then
      echo "Successfully switched to PHP $new_version"
  else
      echo "Warning: PHP version mismatch. Expected $new_version but got $new_current_version" >&2
      return 1
  fi
}

# Alias for switch-php
function phpv() {
    switch-php "$@"
}

# Run tests
function p() {
   if [ -f vendor/bin/pest ]; then
      vendor/bin/pest "$@"
   else
      vendor/bin/phpunit "$@"
   fi
}

function pf() {
   if [ -f vendor/bin/pest ]; then
      vendor/bin/pest --filter "$@"
   else
      vendor/bin/phpunit --filter "$@"
   fi
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en0)
	sleep 2 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

function tinker()
{
  if [ -z "$1" ]
    then
       php artisan tinker
    else
       php artisan tinker --execute="dd($1);"
  fi
}

# When you enable/disable Xdebug, it affects both CLI and FPM
xdebug() {
    phpVersion=$(php -v | grep -oE 'PHP [0-9]+\.[0-9]+' | awk '{print $2}')
    xdebugConfPath="/opt/homebrew/etc/php/$phpVersion/conf.d/90-xdebug.ini"

    # Check if xdebug is installed by checking the .so file
    if [ ! -f "$xdebugConfPath" ]; then
        echo -e "\033[33mXdebug config not found. Installing...\033[0m"
        pie install xdebug/xdebug
        return
    fi

    if php -m | grep -q "Xdebug"; then
      # Disable Xdebug
      sed -i '' 's/^zend_extension/;zend_extension/g' "$xdebugConfPath"
      echo -e "xdebug is now \033[31minactive\033[0m for $phpVersion ($xdebugConfPath)"
    else
      # Enable Xdebug
      sed -i '' 's/^;zend_extension/zend_extension/g' "$xdebugConfPath"
      echo -e "xdebug is now \033[32mactive\033[0m for $phpVersion ($xdebugConfPath)"
    fi

    brew services restart "php@$phpVersion"
}

function scheduler () {
    while :; do
        php artisan schedule:run
	echo "Sleeping 60 seconds..."
        sleep 60
    done
}
